import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
import telegram
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import asyncio
from random import uniform, choice
import os
import json
import requests
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(level)s - %(message)s',
    level=logging.DEBUG  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å INFO –Ω–∞ DEBUG –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
)
logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä
currency_pairs = [
    'GOLD', 'LATAM', 'IMX', 'BIN IDX', 'USD/CHF', 'GBP/JPY', 'PMX', 'EUR/CAD',
    'EUR/JPY', 'GBP/USD', 'EUR/GBP', 'NZD/JPY', 'EUR/USD', 'USD/JPY', 'ASIA',
    'INTEL', 'ALIBABA', 'AMAZON', 'APPLE', 'MASTERCARD', 'MICROSOFT', 'TESLA',
    'VISA', 'USD/CAD', 'AUD/JPY', 'NETFLIX', 'USD/CNH', 'FACEBOOK', 'GOOGLE',
    'AUD/NZD', 'CRYPTO IDX', 'AUD/CHF', 'DOWJONES30', 'NASDAQ', 'BITCOIN',
    'EUR/NZD', 'AUD/CAD', 'AUD/USD', 'CAD/CHF', 'CAD/JPY', 'CHF/JPY',
    'ETHEREUM', 'EUR/AUD', 'EUR/CHF', 'EUR/SEK', 'GBP/AUD', 'GBP/CAD',
    'GBP/CHF', 'GBP/NZD', 'GSMI', 'LITECOIN', 'MCDONALDS', 'NVIDIA', 'NZD/CAD',
    'NZD/CHF', 'NZD/USD', 'RIPPLE', 'SILVER', 'TOYOTA', 'USD/MXN', 'USD/NOK',
    'USD/SEK', 'USD/SGD', 'USD/ZAR'
]

# –ü—Ä–∏–º–µ—Ä —Å–ª–æ–≤–∞—Ä—è —Å URL-–∞–¥—Ä–µ—Å–∞–º–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
image_url = 'https://avatars.dzeninfra.ru/get-zen_doc/3530293/pub_6508970c6908147fa5ca2ee4_6508979174d98d3357fcab1b/scale_1200'
currency_images = {pair: image_url for pair in currency_pairs}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
def generate_exchange_rate():
    rate = round(uniform(0.5, 2.0), 4)
    direction = choice(['–≤–≤–µ—Ä—Öüìà', '–≤–Ω–∏–∑üìâ'])
    return rate, direction

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
def get_real_exchange_rate(currency_pair):
    try:
        url = f"https://api.exchangerate-api.com/v4/latest/{currency_pair.split('/')[0]}"
        response = requests.get(url)
        data = response.json()
        return data['rates'].get(currency_pair.split('/')[1], '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –¥–ª—è {currency_pair}: {e}")
        return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ JSON —Ñ–∞–π–ª
def save_user_data(user_id, data):
    file_path = 'user_data.json'
    if os.path.exists(file_path):
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read().strip()
                if content:
                    user_data = json.loads(content)
                else:
                    user_data = {}
        except (json.JSONDecodeError, FileNotFoundError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ user_data.json: {e}")
            user_data = {}
    else:
        user_data = {}

    user_data[user_id] = data

    with open(file_path, 'w', encoding='utf-8') as f:
        json.dump(user_data, f, ensure_ascii=False, indent=4)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.message.chat_id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = {
        'chat_id': chat_id,
        'username': update.message.from_user.username,
        'first_name': update.message.from_user.first_name,
        'last_name': update.message.from_user.last_name
    }
    save_user_data(str(chat_id), user_data)

    await update.message.reply_text(f'–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä...')
    await show_pairs(update, context, 0)

# –ö–æ–º–∞–Ω–¥–∞ /about
async def about(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text('–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –∏ –¥—Ä—É–≥–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Telegram API.')

# –ö–æ–º–∞–Ω–¥–∞ /commands
async def commands(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    commands_text = (
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/about - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
        "/options - –û–ø—Ü–∏–∏ –±–æ—Ç–∞\n"
        "/help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n"
        "/commands - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥"
    )
    await update.message.reply_text(commands_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == 'help':
        help_message = "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, /about –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ, /options –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–ø—Ü–∏–π, –∏ /commands –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥."
        await query.message.reply_text(help_message)

    elif query.data == 'about':
        about_message = '–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –∏ –¥—Ä—É–≥–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Telegram API.'
        await query.message.reply_text(about_message)

    elif query.data == 'exchange_rate':
        await show_pairs(update, context, 0)

    elif query.data.startswith("pair_"):
        _, selected_pair, page = query.data.split("_")
        real_rate = get_real_exchange_rate(selected_pair)
        rate, direction = generate_exchange_rate()
        message = f"–í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞: {selected_pair}\n–ö—É—Ä—Å: {rate}\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}"

        if selected_pair in currency_images:
            photo_url = currency_images[selected_pair]
            await query.message.reply_photo(photo=photo_url, caption=message)
        else:
            await query.edit_message_text(text=message)

        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"nav_{page}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:", reply_markup=reply_markup)

    elif query.data.startswith("nav_"):
        page = int(query.data.split("_")[1])
        await show_pairs(update, context, page)
    elif query.data == "ignore":
        pass

# –ö–æ–º–∞–Ω–¥–∞ /options
async def options(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("–ö—É—Ä—Å –≤–∞–ª—é—Ç", callback_data='exchange_rate')],
        [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data='help')],
        [InlineKeyboardButton("–û –±–æ—Ç–µ", callback_data='about')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
async def show_pairs(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int) -> None:
    pairs_per_page = 10
    start_index = page * pairs_per_page
    end_index = start_index + pairs_per_page
    pairs_to_show = currency_pairs[start_index:end_index]

    keyboard = [
        [InlineKeyboardButton(pair, callback_data=f"pair_{pair}_{page}")] for pair in pairs_to_show
    ] + [
        [
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"nav_{page-1}") if page > 0 else InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="ignore"),
            InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"nav_{page+1}") if end_index < len(currency_pairs) else InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="ignore")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:', reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:', reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async def send_message_to_all(bot, message):
    file_path = 'user_data.json'
    if os.path.exists(file_path):
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read().strip()
                if content:
                    user_data = json.loads(content)
                else:
                    user_data = {}
        except (json.JSONDecodeError, FileNotFoundError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ user_data.json: {e}")
            user_data = {}

        for chat_id in user_data.keys():
            try:
                await bot.send_message(chat_id=int(chat_id), text=message)
            except telegram.error.TelegramError as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {e}")
    else:
        logger.error(f"–§–∞–π–ª {file_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
async def send_random_currency_update(bot):
    currency_pair = choice(currency_pairs)
    rate, direction = generate_exchange_rate()
    message = f'–ö—É—Ä—Å –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã {currency_pair} —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {rate} –∏ –æ–Ω –∏–¥–µ—Ç {direction}.'
    await send_message_to_all(bot, message)

# –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
async def scheduled_task():
    logger.info("–í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É")

def start_scheduler():
    scheduler = AsyncIOScheduler()
    scheduler.add_job(scheduled_task, 'interval', minutes=60)
    scheduler.start()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á
async def main(token: str):
    bot = Bot(token=token)
    application = Application.builder().token(token).build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('about', about))
    application.add_handler(CommandHandler('options', options))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(CommandHandler('help', about))
    application.add_handler(CommandHandler('commands', commands))

    await application.initialize()
    await application.start()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await application.updater.start_polling()

    start_scheduler()

    while True:
        await send_random_currency_update(bot)
        await asyncio.sleep(uniform(10, 60) * 60)

if __name__ == '__main__':
    token = '7340454174:AAH6sYIOaCIsumXy2OAK81-CnoyBoU-ePNw'

    try:
        asyncio.run(main(token))
    except RuntimeError as e:
        if str(e) == "This event loop is already running":
            loop = asyncio.get_running_loop()
            loop.create_task(main(token))
        else:
            raise